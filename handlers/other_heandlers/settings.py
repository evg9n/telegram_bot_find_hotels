from loader import bot
from telebot.types import Message
from database.write_database import write_chat, get_settings, update_settings, add_user
from states.state_settings import StateSettings
from keyboards.reply.settings import buttons_settings
from keyboards.inline.settings import currency, list_sort, list_guest_rating, list_stars, distance
from sqlite3 import OperationalError


@bot.message_handler(func=lambda message: message.text == '–§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ \U00002699' or message.text == '/settings')
def list_settings(message: Message):

    try:
        settings = get_settings(user_id=str(message.from_user.id))
        if not settings:
            add_user(str(message.from_user.id))
            settings = get_settings(user_id=str(message.from_user.id))
    except OperationalError:
        add_user(user_id=str(message.from_user.id))
        settings = get_settings(user_id=str(message.from_user.id))

    bot.send_message(chat_id=message.from_user.id,
                     text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:',
                     reply_markup=buttons_settings(settings=settings))

    try:
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )
    except OperationalError:
        add_user(user_id=str(message.from_user.id))
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )


@bot.message_handler(state=StateSettings.adulst, content_types=['text'])
def count_adulst(message: Message):
    if message.text.isdigit():
        bot.set_state(user_id=message.from_user.id,
                      state=None,
                      chat_id=message.chat.id)
        update_settings(user_id=str(message.from_user.id), setting='adults', value=message.text)
        settings = get_settings(user_id=str(message.from_user.id))
        bot.send_message(chat_id=message.from_user.id,
                         text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–æü§ü',
                         reply_markup=buttons_settings(settings=settings))

    else:
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–ù—É –Ω–µ –±—ã–≤–∞–µ—Ç —Å—Ç–æ–ª—å–∫–æ {message.text} –ª—é–¥–µ–πü§¶\n'
                              '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ—â–µ —Ä–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö')

    try:
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )
    except OperationalError:
        add_user(user_id=str(message.from_user.id))
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )


@bot.message_handler(state=StateSettings.children, content_types=['text'])
def count_children(message: Message):
    if message.text.isdigit():
        bot.set_state(user_id=message.from_user.id,
                      state=None,
                      chat_id=message.chat.id)
        update_settings(user_id=str(message.from_user.id), setting='children', value=message.text)
        settings = get_settings(user_id=str(message.from_user.id))
        bot.send_message(chat_id=message.from_user.id,
                         text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æü§ü',
                         reply_markup=buttons_settings(settings=settings))

    else:
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–ù—É –Ω–µ –±—ã–≤–∞–µ—Ç —Å—Ç–æ–ª—å–∫–æ {message.text} –¥–µ—Ç–µ–πü§¶\n'
                              '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ—â–µ —Ä–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π')

    try:
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )
    except OperationalError:
        add_user(user_id=str(message.from_user.id))
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )


@bot.message_handler(state=StateSettings.min_price, content_types=['text'])
def min_price(message: Message):
    if message.text.isdigit():
        max_pric = int(get_settings(user_id=message.from_user.id)['max_price'])
        if int(message.text) <= max_pric or max_pric == 0:
            bot.set_state(user_id=message.from_user.id,
                          state=None,
                          chat_id=message.chat.id)
            update_settings(user_id=str(message.from_user.id), setting='min_price',
                            value=message.text)
            settings = get_settings(user_id=message.from_user.id)
            bot.send_message(chat_id=message.from_user.id,
                             text='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ—á—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ü§ü',
                             reply_markup=buttons_settings(settings=settings))
        else:
            bot.send_message(chat_id=message.from_user.id,
                             text='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π\n'
                                  f'–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –±–æ–ª–µ–µ {max_pric}')
    else:
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–ù—É –Ω–µ –±—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ {message.text}ü§¶\n'
                              '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')

    try:
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )
    except OperationalError:
        add_user(user_id=str(message.from_user.id))
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )


@bot.message_handler(state=StateSettings.max_price, content_types=['text'])
def max_price(message: Message):
    if message.text.isdigit():
        min_pric = int(get_settings(user_id=message.from_user.id)['min_price'])
        if int(message.text) >= min_pric or int(message.text) == 0:
            bot.set_state(user_id=message.from_user.id,
                          state=None,
                          chat_id=message.chat.id)
            update_settings(user_id=str(message.from_user.id), setting='max_price',
                            value=message.text)
            settings = get_settings(user_id=message.from_user.id)
            bot.send_message(chat_id=message.from_user.id,
                             text='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ—á—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ü§ü',
                             reply_markup=buttons_settings(settings=settings))
        else:
            bot.send_message(chat_id=message.from_user.id,
                             text='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π\n'
                                  f'–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_pric}')
    else:
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–ù—É –Ω–µ –±—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ {message.text}ü§¶\n'
                              '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')

    try:
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )
    except OperationalError:
        add_user(user_id=str(message.from_user.id))
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )


@bot.message_handler(content_types=['text'])
def edit_settings(message: Message):

    try:
        settings = get_settings(user_id=message.from_user.id)
        if not settings:
            add_user(user_id=message.from_user.id)
            settings = get_settings(user_id=message.from_user.id)
    except OperationalError:
        add_user(user_id=message.from_user.id)
        settings = get_settings(user_id=message.from_user.id)

    min_distance = float(settings['min_distance']) if settings['min_distance'] != '-' else None
    max_distance = float(settings['max_distance']) if settings['max_distance'] != '-' else None

    if '–í–∞–ª—é—Ç–∞:' in message.text:
        bot.send_message(chat_id=message.from_user.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:',
                         reply_markup=currency())
        bot.set_state(user_id=message.from_user.id, state=StateSettings.settings, chat_id=message.chat.id)

    elif '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:' in message.text:
        bot.send_message(chat_id=message.from_user.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É:',
                         reply_markup=list_sort())
        bot.set_state(user_id=message.from_user.id, state=StateSettings.settings, chat_id=message.chat.id)

    elif '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:' in message.text:
        bot.send_message(chat_id=message.from_user.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:',
                         reply_markup=list_guest_rating())
        bot.set_state(user_id=message.from_user.id, state=StateSettings.settings, chat_id=message.chat.id)

    elif '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:' in message.text:
        bot.send_message(chat_id=message.from_user.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:',
                         reply_markup=list_stars())
        bot.set_state(user_id=message.from_user.id, state=StateSettings.settings, chat_id=message.chat.id)

    elif '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:' in message.text:
        current_currency = get_settings(user_id=str(message.from_user.id))['currency']
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ {current_currency}\n'
                              '–û—Ç–ø—Ä–∞–≤—å "0" —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä')
        bot.set_state(user_id=message.from_user.id, state=StateSettings.min_price, chat_id=message.chat.id)

    elif '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:' in message.text:
        current_currency = get_settings(user_id=str(message.from_user.id))['currency']
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ {current_currency}\n'
                              '–û—Ç–ø—Ä–∞–≤—å "0" —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä')
        bot.set_state(user_id=message.from_user.id, state=StateSettings.max_price, chat_id=message.chat.id)

    elif '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö:' in message.text:
        bot.set_state(user_id=message.from_user.id,
                      state=StateSettings.adulst,
                      chat_id=message.chat.id)
        bot.send_message(chat_id=message.from_user.id,
                         text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö')

    elif '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:' in message.text:
        bot.set_state(user_id=message.from_user.id,
                      state=StateSettings.children,
                      chat_id=message.chat.id)
        bot.send_message(chat_id=message.from_user.id,
                         text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π')

    elif '–£–¥–æ–±—Å—Ç–≤–∞:' in message.text:
        pass

    elif '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞:' in message.text:
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–í—ã–±–µ—Ä–∏—Ç–µ:',
                         reply_markup=distance(min_distance=None,
                                               max_distance=max_distance))
        bot.set_state(user_id=message.from_user.id, state=StateSettings.min_distance, chat_id=message.chat.id)

    elif '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞:' in message.text:
        bot.send_message(chat_id=message.from_user.id,
                         text=f'–í—ã–±–µ—Ä–∏—Ç–µ:',
                         reply_markup=distance(min_distance=min_distance,
                                               max_distance=None))
        bot.set_state(user_id=message.from_user.id, state=StateSettings.max_distance, chat_id=message.chat.id)

    try:
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )
    except OperationalError:
        add_user(user_id=str(message.from_user.id))
        write_chat(
            user_id=str(message.from_user.id),
            username=message.from_user.username,
            message=message.text
        )
